{"version":3,"file":"windows-iana.cjs.production.min.js","sources":["../src/findIanaAliases.ts","../src/findIana.ts","../src/findWindows.ts"],"sourcesContent":["import { IANA_ALIAS_MAP } from './data';\n\nimport type { IanaName } from './types';\n\nexport function findIanaAliases(ianaTimeZone: string): IanaName[];\nexport function findIanaAliases(ianaTimeZone: IanaName): IanaName[];\nexport function findIanaAliases(ianaTimeZone: IanaName | string): IanaName[] {\n  const result = new Set<IanaName>();\n\n  IANA_ALIAS_MAP.filter(({ alias }) => alias.includes(ianaTimeZone))\n    .map((it) => it.alias)\n    .flat()\n    .forEach((it) => {\n      result.add(it as IanaName);\n    });\n\n  return Array.from(result);\n}\n","import { WINDOWS_TO_IANA_MAP } from './data';\n\nimport type { IanaName, Territory, WindowsZoneName } from './types';\nimport { findIanaAliases } from './findIanaAliases';\n\nexport function findIana(windowsTimeZone: WindowsZoneName, territory?: Territory): IanaName[];\nexport function findIana(windowsTimeZone: string, territory?: string): IanaName[];\nexport function findIana(windowsTimeZone: WindowsZoneName, territory?: string): IanaName[];\nexport function findIana(windowsTimeZone: string, territory?: Territory): IanaName[];\nexport function findIana(\n  windowsTimeZone: WindowsZoneName | string,\n  territory?: Territory | string,\n): IanaName[] {\n  const set = new Set<IanaName>();\n\n  WINDOWS_TO_IANA_MAP.filter((it) => {\n    if (typeof territory === 'undefined') {\n      return it.windowsName === windowsTimeZone;\n    }\n\n    return it.windowsName === windowsTimeZone && it.territory === territory;\n  })\n    .map((it) => it.iana)\n    .flat()\n    .map(findIanaAliases)\n    .flat()\n    .forEach((alias) => {\n      set.add(alias);\n    });\n\n  return Array.from(set);\n}\n","import { WINDOWS_TO_IANA_MAP } from './data';\n\nimport type { IanaName, WindowsZoneName } from './types';\nimport { findIanaAliases } from './findIanaAliases';\n\nexport function findWindows(ianaTimeZone: IanaName): WindowsZoneName[];\nexport function findWindows(ianaTimeZone: string): WindowsZoneName[];\nexport function findWindows(ianaTimeZone: IanaName | string): WindowsZoneName[] {\n  const aliases = findIanaAliases(ianaTimeZone);\n  const result = new Set<WindowsZoneName>();\n\n  WINDOWS_TO_IANA_MAP.filter((it) =>\n    it.iana.find((it) => aliases.includes(it as IanaName)),\n  ).forEach((entry) => {\n    result.add(entry.windowsName as WindowsZoneName);\n  });\n\n  return Array.from(result);\n}\n"],"names":["findIanaAliases","ianaTimeZone","result","Set","IANA_ALIAS_MAP","filter","alias","includes","map","it","flat","forEach","add","Array","from","windowsTimeZone","territory","set","WINDOWS_TO_IANA_MAP","windowsName","iana","aliases","find","entry"],"mappings":"sh5EAMgBA,EAAgBC,OACxBC,EAAS,IAAIC,WAEnBC,EAAeC,QAAO,qBAAGC,MAAkBC,SAASN,MACjDO,KAAI,SAACC,UAAOA,EAAGH,SACfI,OACAC,SAAQ,SAACF,GACRP,EAAOU,IAAIH,MAGRI,MAAMC,KAAKZ,oFCNlBa,EACAC,OAEMC,EAAM,IAAId,WAEhBe,EAAoBb,QAAO,SAACI,eACD,IAAdO,EACFP,EAAGU,cAAgBJ,EAGrBN,EAAGU,cAAgBJ,GAAmBN,EAAGO,YAAcA,KAE7DR,KAAI,SAACC,UAAOA,EAAGW,QACfV,OACAF,IAAIR,GACJU,OACAC,SAAQ,SAACL,GACRW,EAAIL,IAAIN,MAGLO,MAAMC,KAAKG,2DCvBQhB,OACpBoB,EAAUrB,EAAgBC,GAC1BC,EAAS,IAAIC,WAEnBe,EAAoBb,QAAO,SAACI,UAC1BA,EAAGW,KAAKE,MAAK,SAACb,UAAOY,EAAQd,SAASE,SACtCE,SAAQ,SAACY,GACTrB,EAAOU,IAAIW,EAAMJ,gBAGZN,MAAMC,KAAKZ"}